{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","id","isRequired","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","as","Link","to","mt","Homepage","socket","selectedChatCompare","showLogin","setShowLogin","currentPage","setCurrentPage","allQuestions","question","answer","totalPages","Math","ceil","length","currentQuestions","slice","maxW","centerContent","d","justifyContent","p","bg","w","m","borderRadius","borderWidth","textAlign","fontSize","fontFamily","isFitted","mb","map","item","index","direction","justify","aria-label","icon","ChevronLeft","isDisabled","alignSelf","ChevronRight","isSameSenderMargin","messages","i","userId","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","name","ProfileModal","useDisclosure","isOpen","onOpen","onClose","base","View","isCentered","flexDir","alignItems","boxSize","src","pic","alt","md","ScrollableChat","display","label","placement","hasArrow","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","console","log","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","Button","ChevronDown","removeItem","window","location","reload","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d208cdb.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","// import { Button } from \"@chakra-ui/button\";\r\n// import { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\n// import { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\n// import { VStack } from \"@chakra-ui/layout\";\r\n// import { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useToast } from \"@chakra-ui/react\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import { ChatState } from \"../../Context/ChatProvider\";\r\n\r\n// const Login = () => {\r\n//   const [show, setShow] = useState(false);\r\n//   const handleClick = () => setShow(!show);\r\n//   const toast = useToast();\r\n//   const [email, setEmail] = useState();\r\n//   const [password, setPassword] = useState();\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const history = useHistory();\r\n//   const { setUser } = ChatState();\r\n\r\n//   const submitHandler = async () => {\r\n//     setLoading(true);\r\n//     if (!email || !password) {\r\n//       toast({\r\n//         title: \"Please Fill all the Feilds\",\r\n//         status: \"warning\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"bottom\",\r\n//       });\r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const config = {\r\n//         headers: {\r\n//           \"Content-type\": \"application/json\",\r\n//         },\r\n//       };\r\n\r\n//       const { data } = await axios.post(\r\n//         \"/api/user/login\",\r\n//         { email, password },\r\n//         config\r\n//       );\r\n\r\n//       toast({\r\n//         title: \"Login Successful\",\r\n//         status: \"success\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"bottom\",\r\n//       });\r\n//       setUser(data);\r\n//       localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n//       setLoading(false);\r\n//       history.push(\"/chats\");\r\n//     } catch (error) {\r\n//       toast({\r\n//         title: \"Error Occured!\",\r\n//         description: error.response.data.message,\r\n//         status: \"error\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"bottom\",\r\n//       });\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <VStack spacing=\"10px\">\r\n//       <FormControl id=\"email\" isRequired>\r\n//         <FormLabel>Email Address</FormLabel>\r\n//         <Input\r\n//           value={email}\r\n//           type=\"email\"\r\n//           placeholder=\"Enter Your Email Address\"\r\n//           onChange={(e) => setEmail(e.target.value)}\r\n//         />\r\n//       </FormControl>\r\n//       <FormControl id=\"password\" isRequired>\r\n//         <FormLabel>Password</FormLabel>\r\n//         <InputGroup size=\"md\">\r\n//           <Input\r\n//             value={password}\r\n//             onChange={(e) => setPassword(e.target.value)}\r\n//             type={show ? \"text\" : \"password\"}\r\n//             placeholder=\"Enter password\"\r\n//           />\r\n//           <InputRightElement width=\"4.5rem\">\r\n//             <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n//               {show ? \"Hide\" : \"Show\"}\r\n//             </Button>\r\n//           </InputRightElement>\r\n//         </InputGroup>\r\n//       </FormControl>\r\n//       <Button\r\n//         colorScheme=\"blue\"\r\n//         width=\"100%\"\r\n//         style={{ marginTop: 15 }}\r\n//         onClick={submitHandler}\r\n//         isLoading={loading}\r\n//       >\r\n//         Login\r\n//       </Button>\r\n//       <Button\r\n//         variant=\"solid\"\r\n//         colorScheme=\"red\"\r\n//         width=\"100%\"\r\n//         onClick={() => {\r\n//           setEmail(\"guest@example.com\");\r\n//           setPassword(\"123456\");\r\n//         }}\r\n//       >\r\n//         Get Guest User Credentials\r\n//       </Button>\r\n//     </VStack>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport { NavLink, Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: error.response?.data?.message || \"Login failed\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n      <Button\r\n        as={Link} // Use Link as the base component\r\n        to=\"/\" // Specify the path to navigate\r\n        variant=\"link\"\r\n        colorScheme=\"teal\"\r\n        width=\"100%\"\r\n        mt={4}\r\n      >\r\n        See More Questions Without Login\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","// import {\r\n//   Box,\r\n//   Container,\r\n//   Tab,\r\n//   TabList,\r\n//   TabPanel,\r\n//   TabPanels,\r\n//   Tabs,\r\n//   Text,\r\n// } from \"@chakra-ui/react\";\r\n// import { useEffect } from \"react\";\r\n// import { useHistory } from \"react-router\";\r\n// import Login from \"../components/Authentication/Login\";\r\n// import Signup from \"../components/Authentication/Signup\";\r\n\r\n// function Homepage() {\r\n//   const history = useHistory();\r\n\r\n//   useEffect(() => {\r\n//     const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n//     if (user) history.push(\"/chats\");\r\n//   }, [history]);\r\n\r\n//   return (\r\n//     <Container maxW=\"xl\" centerContent>\r\n//       <Box\r\n//         d=\"flex\"\r\n//         justifyContent=\"center\"\r\n//         p={3}\r\n//         bg=\"white\"\r\n//         w=\"100%\"\r\n//         m=\"40px 0 15px 0\"\r\n//         borderRadius=\"lg\"\r\n//         borderWidth=\"1px\"\r\n//       >\r\n//         <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n//           Talk-A-Tive\r\n//         </Text>\r\n//       </Box>\r\n//       <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n//         <Tabs isFitted variant=\"soft-rounded\">\r\n//           <TabList mb=\"1em\">\r\n//             <Tab>Login</Tab>\r\n//             <Tab>Sign Up</Tab>\r\n//           </TabList>\r\n//           <TabPanels>\r\n//             <TabPanel>\r\n//               <Login />\r\n//             </TabPanel>\r\n//             <TabPanel>\r\n//               <Signup />\r\n//             </TabPanel>\r\n//           </TabPanels>\r\n//         </Tabs>\r\n//       </Box>\r\n//     </Container>\r\n//   );\r\n// }\r\n\r\n// export default Homepage;\r\n\r\nimport {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n  Button,\r\n  Stack,\r\n  IconButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@chakra-ui/icons\";\r\nimport Login from \"../components/Authentication/Login\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n  const [showLogin, setShowLogin] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const itemsPerPage = 6;\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  const allQuestions = [\r\n    {\r\n      question: \"What is the role of a pharmacist in patient care?\",\r\n      answer:\r\n        \"A pharmacist plays a crucial role in patient care by ensuring the safe and effective use of medications, counseling patients on proper medication usage, and providing drug-related information to both patients and healthcare providers.\"\r\n    },\r\n    {\r\n      question: \"What are the common side effects of antibiotics?\",\r\n      answer:\r\n        \"Common side effects of antibiotics include nausea, diarrhea, allergic reactions, and yeast infections. Serious side effects can include liver damage or severe allergic reactions in rare cases.\"\r\n    },\r\n    {\r\n      question: \"How do you handle a situation where a prescribed medication has potential drug interactions?\",\r\n      answer:\r\n        \"I would review the patient's medical history, consult with the prescribing physician, and suggest an alternative medication or dosage adjustment if necessary. Patient safety is always the top priority.\"\r\n    },\r\n    {\r\n      question: \"Can you explain the difference between a generic and a branded drug?\",\r\n      answer:\r\n        \"A generic drug contains the same active ingredients as a branded drug and works the same way in the body, but it is usually less expensive.\"\r\n    },\r\n    {\r\n      question: \"What steps would you take to ensure proper storage of medications?\",\r\n      answer:\r\n        \"I would ensure medications are stored according to their specific requirements, such as temperature, humidity, and light conditions, and regularly check for expired stock.\"\r\n    },\r\n    {\r\n      question: \"How do you educate patients about medication adherence?\",\r\n      answer:\r\n        \"I explain the importance of taking medications as prescribed, address any concerns or misconceptions, and provide tools like pill organizers or reminders if needed.\"\r\n    },\r\n    {\r\n      question: \"What are the different routes of drug administration?\",\r\n      answer:\r\n        \"The routes of drug administration include oral, intravenous, intramuscular, subcutaneous, topical, and inhalation, depending on the drug's formulation and intended use.\"\r\n    },\r\n    {\r\n      question: \"What is the importance of pharmacovigilance?\",\r\n      answer:\r\n        \"Pharmacovigilance is crucial for monitoring the safety of medications, identifying adverse drug reactions, and ensuring public health by minimizing risks associated with drug use.\"\r\n    },\r\n    {\r\n      question: \"How do you counsel a patient who is starting on a new medication?\",\r\n      answer:\r\n        \"I explain the purpose of the medication, its correct usage, possible side effects, and any precautions or interactions to ensure the patient is well-informed and adheres to the treatment plan.\"\r\n    },\r\n    {\r\n      question: \"What measures do you take to prevent dispensing errors?\",\r\n      answer:\r\n        \"I double-check prescriptions, verify patient information, and use barcode scanning systems to minimize errors during the dispensing process.\"\r\n    },\r\n    {\r\n      question: \"What is therapeutic drug monitoring (TDM)?\",\r\n      answer:\r\n        \"Therapeutic drug monitoring involves measuring drug levels in the blood to ensure the medication's efficacy and safety, particularly for drugs with a narrow therapeutic index.\"\r\n    },\r\n    {\r\n      question: \"How do you handle a customer complaint about a medication?\",\r\n      answer:\r\n        \"I listen to the customer's concerns, investigate the issue, consult with healthcare providers if needed, and provide an appropriate resolution while maintaining professionalism.\"\r\n    },\r\n    {\r\n      question: \"What is the significance of drug expiration dates?\",\r\n      answer:\r\n        \"Drug expiration dates indicate the period during which a medication is expected to remain effective and safe. Using medications past their expiration date can reduce efficacy or pose health risks.\"\r\n    },\r\n    {\r\n      question: \"How do you stay updated on new medications and treatments?\",\r\n      answer:\r\n        \"I regularly attend professional workshops, read medical journals, and participate in continuing education programs to stay informed about advancements in the field.\"\r\n    },\r\n    {\r\n      question: \"What are the key considerations when compounding medications?\",\r\n      answer:\r\n        \"Key considerations include using accurate measurements, maintaining a sterile environment, and ensuring compatibility and stability of the compounded formulation.\"\r\n    },\r\n    {\r\n      question: \"How would you handle a patient requesting an over-the-counter medication for a potentially serious condition?\",\r\n      answer:\r\n        \"I would assess the patient's symptoms, provide initial advice, and recommend consulting a healthcare provider for a proper diagnosis and treatment plan.\"\r\n    },\r\n    {\r\n      question: \"What steps do you take to ensure patient confidentiality?\",\r\n      answer:\r\n        \"I follow HIPAA guidelines, securely store patient records, and avoid discussing sensitive information in public areas to protect patient privacy.\"\r\n    },\r\n    {\r\n      question: \"Can you explain the difference between pharmacokinetics and pharmacodynamics?\",\r\n      answer:\r\n        \"Pharmacokinetics refers to how the body processes a drug (absorption, distribution, metabolism, and excretion), while pharmacodynamics studies the drug's effects on the body.\"\r\n    },\r\n    {\r\n      question: \"How do you address medication shortages in the pharmacy?\",\r\n      answer:\r\n        \"I communicate with suppliers, identify alternative medications, and work with healthcare providers to adjust prescriptions if necessary.\"\r\n    },\r\n    {\r\n      question: \"What qualities make an effective pharmacist?\",\r\n      answer:\r\n        \"An effective pharmacist possesses strong communication skills, attention to detail, problem-solving abilities, and a commitment to patient care and safety.\"\r\n    }\r\n  ];\r\n\r\n  const totalPages = Math.ceil(allQuestions.length / itemsPerPage);\r\n  const currentQuestions = allQuestions.slice(\r\n    (currentPage - 1) * itemsPerPage,\r\n    currentPage * itemsPerPage\r\n  );\r\n\r\n  const handleShowLogin = () => {\r\n    setShowLogin(true);\r\n  };\r\n\r\n  const handlePreviousPage = () => {\r\n    if (currentPage > 1) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  const handleNextPage = () => {\r\n    if (currentPage < totalPages) {\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      {/* Header Section */}\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n        textAlign=\"center\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Pharmacy Interview Q&A\r\n        </Text>\r\n      </Box>\r\n\r\n      {/* Content Section */}\r\n      {!showLogin ? (\r\n        <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n          <Tabs isFitted variant=\"soft-rounded\">\r\n            <TabList mb=\"1em\">\r\n              <Tab>Questions</Tab>\r\n              <Tab>Answers</Tab>\r\n            </TabList>\r\n            <TabPanels>\r\n              <TabPanel>\r\n                {currentQuestions.map((item, index) => (\r\n                  <Text key={index} fontSize=\"lg\" mb={3}>\r\n                    {index + 1 + (currentPage - 1) * itemsPerPage}. {item.question}\r\n                  </Text>\r\n                ))}\r\n              </TabPanel>\r\n              <TabPanel>\r\n                {currentQuestions.map((item, index) => (\r\n                  <Text key={index} fontSize=\"lg\" mb={3}>\r\n                    {index + 1 + (currentPage - 1) * itemsPerPage}. {item.answer}\r\n                  </Text>\r\n                ))}\r\n              </TabPanel>\r\n            </TabPanels>\r\n          </Tabs>\r\n          <Stack direction=\"row\" justify=\"space-between\" mt={4}>\r\n            <IconButton\r\n              aria-label=\"Previous Page\"\r\n              icon={<ChevronLeftIcon />}\r\n              onClick={handlePreviousPage}\r\n              isDisabled={currentPage === 1}\r\n            />\r\n            <Text alignSelf=\"center\">\r\n              Page {currentPage} of {totalPages}\r\n            </Text>\r\n            <IconButton\r\n              aria-label=\"Next Page\"\r\n              icon={<ChevronRightIcon />}\r\n              onClick={handleNextPage}\r\n              isDisabled={currentPage === totalPages}\r\n            />\r\n          </Stack>\r\n          <Button\r\n            mt={4}\r\n            colorScheme=\"teal\"\r\n            onClick={handleShowLogin}\r\n            w=\"full\"\r\n          >\r\n            Latest Interview Questions and Answers\r\n          </Button>\r\n        </Box>\r\n      ) : (\r\n        <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n          <Login />\r\n        </Box>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"https://interview-questions-kuft.onrender.com\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    window.location.reload()\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Talk-A-Tive\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n        \r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}